strata.win <- strata.loss <- rep(0,nrow(oper.weight))
strata.stage.output <- list() # list for stage level decomposition
s=1
# extract pair.data for current stratum
pair.data.input <- comparison.output[["pair.data.list"]][[s]]
org.treat <- with(comparison.output,
treatment[strata == oper.weight[s,1]])
org.treat
col.num <- (ncol(pair.data.input)-1)/2
win <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]==1))
loss <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]== -1))
treat.sum <- sum((pair.data.input[,2]==1) * pair.data.input[,(1 + 2*col.num)])
WR <- win/loss
var.data <- pair.data.input[,c(1,(1 + 2*col.num))]
var.data.oper <- aggregate(var.data,by=list(var.data[,1]),FUN=sum)[,3]
var <- sum(var.data.oper^2)*sum(org.treat==1)*sum(org.treat==0)/
(length(org.treat)*(length(org.treat)-1))
strata.win[s] <- win
strata.loss[s] <- loss
strata.WR[s] <- WR
strata.stat[s] <- treat.sum
strata.var[s] <- var
## stage level wins, losses, and ties
# extract stage.results for stage-level information
stage.results.input <- comparison.output[["stage.results"]][[s]]
num.stage <- ncol(stage.results.input)
stage.results.input <- cbind(pair.data.input[,c(2,(2+col.num))],stage.results.input)
stage.results.input <- cbind(pair.data.input[,c(2,(2+col.num))],stage.results.input)
stage.results.input
## stage level wins, losses, and ties
# extract stage.results for stage-level information
stage.results.input <- comparison.output[["stage.results.list"]][[s]]
num.stage <- ncol(stage.results.input)
stage.results.input <- cbind(pair.data.input[,c(2,(2+col.num))],stage.results.input)
stage.output <- matrix(NA, nrow=num.stage, ncol=3)
num.between.group <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0))
for (stage.index in 1:num.stage) {
win <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==1), na.rm = T)
loss <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==-1), na.rm = T)
tie <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==0), na.rm = T)
stage.output[stage.index,] <- c(win, tie, loss) / num.between.group
}
stage.output <- as.data.frame(stage.output) * 100
names(stage.output) <- c("wins(%)","ties(%)","losses(%)")
strata.stage.output[s] <- stage.output
stage.output
strata.stage.output <- list() # list for stage level decomposition
strata.stage.output[s] <- stage.output
strata.stage.output[[s]] <- stage.output
names(strata.stage.output)[s] <- paste0("stratum",oper.weight[s,1])
strata.stage.output
## extract strata information
strata <- comparison.output$strata
oper.weight <- comparison.output$strata.weight
wr.weight <- oper.weight[,2]*oper.weight[,3]
## stratified analysis for comparison results within each stratum
strata.WR <- strata.stat <- strata.var <- rep(0,nrow(oper.weight))
strata.win <- strata.loss <- rep(0,nrow(oper.weight))
strata.stage.output <- list() # list for stage level decomposition
for (s in 1:nrow(oper.weight)) {
# extract pair.data for current stratum
pair.data.input <- comparison.output[["pair.data.list"]][[s]]
org.treat <- with(comparison.output,
treatment[strata == oper.weight[s,1]])
col.num <- (ncol(pair.data.input)-1)/2
win <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]==1))
loss <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]== -1))
treat.sum <- sum((pair.data.input[,2]==1) * pair.data.input[,(1 + 2*col.num)])
WR <- win/loss
var.data <- pair.data.input[,c(1,(1 + 2*col.num))]
var.data.oper <- aggregate(var.data,by=list(var.data[,1]),FUN=sum)[,3]
var <- sum(var.data.oper^2)*sum(org.treat==1)*sum(org.treat==0)/
(length(org.treat)*(length(org.treat)-1))
strata.win[s] <- win
strata.loss[s] <- loss
strata.WR[s] <- WR
strata.stat[s] <- treat.sum
strata.var[s] <- var
## stage level wins, losses, and ties
# extract stage.results for stage-level information
stage.results.input <- comparison.output[["stage.results.list"]][[s]]
num.stage <- ncol(stage.results.input)
stage.results.input <- cbind(pair.data.input[,c(2,(2+col.num))],stage.results.input)
stage.output <- matrix(NA, nrow=num.stage, ncol=3)
num.between.group <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0))
for (stage.index in 1:num.stage) {
win <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==1), na.rm = T)
loss <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==-1), na.rm = T)
tie <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==0), na.rm = T)
stage.output[stage.index,] <- c(win, tie, loss) / num.between.group
}
stage.output <- as.data.frame(stage.output) * 100
names(stage.output) <- c("wins(%)","ties(%)","losses(%)")
strata.stage.output[[s]] <- stage.output
names(strata.stage.output)[s] <- paste0("stratum",oper.weight[s,1])
}
## integrate information from strata
WR <- sum((strata.win/oper.weight[,3])) / sum((strata.loss/oper.weight[,3]))
WR
WR_old <- weighted.mean(strata.WR,w=wr.weight)
stat <- sum(strata.stat)
var <- sum(strata.var)
P <- 2*pnorm(abs(stat/sqrt(var)),lower.tail = F)
P
strata.win
strata.loss
strata.WR
strata.win
s=1
# extract pair.data for current stratum
pair.data.input <- comparison.output[["pair.data.list"]][[s]]
org.treat <- with(comparison.output,
treatment[strata == oper.weight[s,1]])
col.num <- (ncol(pair.data.input)-1)/2
win <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]==1))
loss <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]== -1))
treat.sum <- sum((pair.data.input[,2]==1) * pair.data.input[,(1 + 2*col.num)])
WR <- win/loss
var.data <- pair.data.input[,c(1,(1 + 2*col.num))]
var.data.oper <- aggregate(var.data,by=list(var.data[,1]),FUN=sum)[,3]
var <- sum(var.data.oper^2)*sum(org.treat==1)*sum(org.treat==0)/
(length(org.treat)*(length(org.treat)-1))
strata.win[s] <- win
strata.loss[s] <- loss
strata.WR[s] <- WR
strata.stat[s] <- treat.sum
strata.var[s] <- var
strata.win
## stratified analysis for comparison results within each stratum
strata.WR <- strata.stat <- strata.var <- rep(0,nrow(oper.weight))
strata.win <- strata.loss <- rep(0,nrow(oper.weight))
strata.stage.output <- list() # list for stage level decomposition
strata.WR
s=1
# extract pair.data for current stratum
pair.data.input <- comparison.output[["pair.data.list"]][[s]]
org.treat <- with(comparison.output,
treatment[strata == oper.weight[s,1]])
col.num <- (ncol(pair.data.input)-1)/2
win <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]==1))
loss <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]== -1))
treat.sum <- sum((pair.data.input[,2]==1) * pair.data.input[,(1 + 2*col.num)])
WR <- win/loss
var.data <- pair.data.input[,c(1,(1 + 2*col.num))]
var.data.oper <- aggregate(var.data,by=list(var.data[,1]),FUN=sum)[,3]
var <- sum(var.data.oper^2)*sum(org.treat==1)*sum(org.treat==0)/
(length(org.treat)*(length(org.treat)-1))
strata.win[s] <- win
strata.loss[s] <- loss
strata.WR[s] <- WR
strata.stat[s] <- treat.sum
strata.var[s] <- var
strata.win
#'                                   threshold = c(0,0), stage = c(1,2),
#'                                   direction = c(1,1),
#'                                   strata = sample_data$strata)
#'
#' Example 2: non-stratified comparison
#' nonstrata.compare <- WRMT.comparison(data = sample_data[,1:6],
#'                                      threshold = c(0,0), stage = c(1,2),
#'                                      direction = c(1,1))
#'
#'
WRMT.comparison <- function (data, threshold, stage=NULL, direction=NULL,
strata = NULL) {
## calculate strata weights
if (length(strata)==0) strata = rep(1, nrow(data)) ## non-stratified analysis
stra <- unique(strata)
stra.weight <- data.frame(cbind(stra,rep(1,length(stra))))
names(stra.weight) <- c('stra','weight')
strata.count <- data.frame(table(strata))
names(strata.count) <- c('stra','count')
oper.weight <- merge(stra.weight,strata.count,by='stra')
## get endpoint infoamtion (number of endpionts, favroable values, etc.)
num.endpoint <- (ncol(data) - 2) / 2
if (length(direction) == 0) direction <- rep(1, num.endpoint)
# make larger number more favorable
direction.matrix <- matrix(direction, nrow=nrow(data), ncol=num.endpoint, byrow=T)
data[,seq(3,(3+2*(num.endpoint-1)),2)] <- data[,seq(3,(3+2*(num.endpoint-1)),2)] *
direction.matrix
## check stage information correctly specified
if (length(stage)==0 & (length(threshold)%%num.endpoint == 0)) {
stage <- rep(seq(1,num.endpoint),length(threshold)/num.endpoint)
} else if (length(stage)==0) {
stop('Stage needs to be specified under current setting')
}
## pairwise comparison for each stratum
pair.data.list <- list()
stage.results.list <- list()
for (s in 1:nrow(oper.weight)) {
current.strata.data <- data[strata==oper.weight[s,1],]
pair.data <- data.to.pair(current.strata.data)
pair.data$result <- 0 # comparison results
stage.results <- matrix(data=NA, nrow = nrow(pair.data), ncol = length(stage))
col.num <- 2 + 2*num.endpoint
for (i in 1:length(threshold)) {
current.sub <- pair.data$result == 0
t1.index <- 1 + 2 * stage[i]
t2.index <- col.num + t1.index
c1.index <- 2 + 2 * stage[i];
c2.index <- col.num + c1.index
current.stage <- WRMT.one.stage.sur(t1=pair.data[current.sub,t1.index],
t2=pair.data[current.sub,t2.index],
c1=pair.data[current.sub,c1.index],
c2=pair.data[current.sub,c2.index],
threshold=threshold[i])
pair.data$result[current.sub] <- current.stage
stage.results[current.sub,i] <- current.stage
}
pair.data.list[[s]] <- pair.data
stage.results.list[[s]] <- stage.results
names(pair.data.list)[s] <- paste0("stratum", oper.weight[s,1])
names(stage.results.list)[s] <- paste0("stratum", oper.weight[s,1])
}
## organize output list
output <- list(pair.data.list = pair.data.list,
stage.results.list = stage.results.list,
treatment = data[,2],
strata = strata,
strata.weight = oper.weight)
return(output)
}
strata.compare <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata)
comparison.output = strata.compare
## extract strata information
strata <- comparison.output$strata
oper.weight <- comparison.output$strata.weight
wr.weight <- oper.weight[,2]*oper.weight[,3]
## stratified analysis for comparison results within each stratum
strata.WR <- strata.stat <- strata.var <- rep(0,nrow(oper.weight))
strata.win <- strata.loss <- rep(0,nrow(oper.weight))
strata.stage.output <- list() # list for stage level decomposition
for (s in 1:nrow(oper.weight)) {
# extract pair.data for current stratum
pair.data.input <- comparison.output[["pair.data.list"]][[s]]
org.treat <- with(comparison.output,
treatment[strata == oper.weight[s,1]])
col.num <- (ncol(pair.data.input)-1)/2
win <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]==1))
loss <- sum((pair.data.input[,2]==1) * (pair.data.input[,(2+col.num)]==0) *
(pair.data.input[,(1 + 2*col.num)]== -1))
treat.sum <- sum((pair.data.input[,2]==1) * pair.data.input[,(1 + 2*col.num)])
WR <- win/loss
var.data <- pair.data.input[,c(1,(1 + 2*col.num))]
var.data.oper <- aggregate(var.data,by=list(var.data[,1]),FUN=sum)[,3]
var <- sum(var.data.oper^2)*sum(org.treat==1)*sum(org.treat==0)/
(length(org.treat)*(length(org.treat)-1))
strata.win[s] <- win
strata.loss[s] <- loss
strata.WR[s] <- WR
strata.stat[s] <- treat.sum
strata.var[s] <- var
## stage level wins, losses, and ties
# extract stage.results for stage-level information
stage.results.input <- comparison.output[["stage.results.list"]][[s]]
num.stage <- ncol(stage.results.input)
stage.results.input <- cbind(pair.data.input[,c(2,(2+col.num))],stage.results.input)
stage.output <- matrix(NA, nrow=num.stage, ncol=3)
num.between.group <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0))
for (stage.index in 1:num.stage) {
win <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==1), na.rm = T)
loss <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==-1), na.rm = T)
tie <- sum((stage.results.input[,1]==1) * (stage.results.input[,2]==0) *
(stage.results.input[,(2 + stage.index)]==0), na.rm = T)
stage.output[stage.index,] <- c(win, tie, loss) / num.between.group
}
stage.output <- as.data.frame(stage.output) * 100
names(stage.output) <- c("wins(%)","ties(%)","losses(%)")
strata.stage.output[[s]] <- stage.output
names(strata.stage.output)[s] <- paste0("stratum",oper.weight[s,1])
}
## integrate information from strata
WR <- sum((strata.win/oper.weight[,3])) / sum((strata.loss/oper.weight[,3]))
WR_old <- weighted.mean(strata.WR,w=wr.weight)
stat <- sum(strata.stat)
var <- sum(strata.var)
P <- 2*pnorm(abs(stat/sqrt(var)),lower.tail = F)
WR
strata.win
strata.loss
stat <- sum(strata.stat)
var <- sum(strata.var)
P <- 2*pnorm(abs(stat/sqrt(var)),lower.tail = F)
P
strata.WR
oper.weight
order(oper.weight$stra)
oper.weight <- merge(stra.weight,strata.count,by='stra')
oper.weight[order(oper.weight$stra),]
stra <- unique(strata)
oper.weight <- data.frame(table(strata))
oper.weight
names(oper.weight) <- c('stra','weight')
oper.weight
oper.weight[order(oper.weight$stra),] # sort the stratum, increasing in index
strata.summary <- data.frame(strata = oper.weight[,1],
weight = oper.weight[,2]/sum(oper.weight[,2]),
unadj.WR = strata.WR
)
strata.summary
strata.stage.output
temp <- strata.stage.output[[1]]
temp
strata.summary
stat
var
library(devtools)
strata.compare <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata)
analysis.result <- comparison.result(strata.compare)
strata.compare <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata)
analysis.result <- comparison.result(strata.compare)
cat("WR:",analysis.result$WR, "; P-value:", analysis.result$P,"\n")
help("comparison.result")
help("comparison.result")
help("comparison.result")
strata.compare <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata)
analysis.result <- comparison.result(strata.compare)
cat("WR:",analysis.result$WR, "; P-value:", analysis.result$P,"\n")
analysis.result
nonstrata.compare <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1))
analysis.result <- comparison.result(nonstrata.compare)
cat("WR:",analysis.result$WR, "; P-value:", analysis.result$P,"\n")
?WRMT
?WRMT
?WRMT
?is.null
a <- NULL
is.null(a)
my_function <- function(method = c("A", "B", "C")) {
method <- match.arg(method)
}
my_function(123)
my_function("123")
?tryCatch
library(devtools)
use_r("main")
?WRAT
?WRMT
?WRAT
help("comparison.result")
help("comparison.result")
library(devtools)
analysis.results <- WRAT(data = sample_data[,1:6],
method = "weights",
weights = c(1,1), calipers = 0.2,
clinical.threshold = c(0,0),
direction = c(1,1),
strata = sample_data[,7],
strata.weight = NULL)
analysis.results$Stage.decompose
analysis.results$strata.summary
sample_data[,7]
analysis.results <- WRMT(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata,
strata.weight = NULL)
analysis.results$strata.summary
comparison.output <- WRMT.comparison(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata,
strata.weight = NULL)
## extract strata information
strata <- comparison.output$strata
strata
sample_data$strata
analysis.results <- WRAT(data = sample_data[,1:6],
method = "weights",
weights = c(1,1), calipers = 0.2,
clinical.threshold = c(0,0),
direction = c(1,1),
strata = sample_data$strata,
strata.weight = NULL)
analysis.results$Stage.decompose
analysis.results$strata.summary
colSums(analysis.results$strata.summary)
sum(analysis.results$strata.summary$weight)
analysis.results$P
analysis.results$WR
analysis.results <- WRMT(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = sample_data$strata,
strata.weight = NULL)
analysis.results$WR
analysis.results$P
analysis.results <- WRAT(data = sample_data[,1:6],
method = "weights",
weights = c(1,1), calipers = 0.2,
clinical.threshold = c(0,0),
direction = c(1,1),
strata = NULL,
strata.weight = NULL)
analysis.results$Stage.decompose
analysis.results <- WRMT(data = sample_data[,1:6],
threshold = c(7,7,0,0), stage = c(1,2,1,2),
direction = c(1,1),
strata = NULL,
strata.weight = NULL)
cat("WR:",analysis.result$WR, "; P-value:", analysis.result$P,"\n")
cat("WR:",analysis.results$WR, "; P-value:", analysis.results$P,"\n")
save(sample_data, file="D:\\MYH\\Study\\Yale\\RA 2021\\YSPH\\PCWR paper\\revise 202403\\Biometrical Journal\\WRMT_Supp_Info_Code\\Case_study\\sample_data_stratified.RData")
names(sample_data)
max(sample_data$T1)
library(WinRatio)
load(sample_data)
library(WinRatio)
mydata <- with(sample_data,
data.frame(ID = ID,
treat = treat,
T1 = T1,
E1 = 1 - C1,
T2 = T2,
E2 = 1 - C2,
FU = 1000
))
mydata
WR.con <- winratio(id="ID", trt="treat", active=1,
outcomes = list(c("E1","s","T1"),
c("E2","s","T2")),
fu="FU",
data=mydata,
keep.matrix = F)
WR.con$wr
WRMT.con <- WRMT(data = sample_data[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = NULL,
strata.weight = NULL)
WR.con$wr
WR.con$p.value
WRMT.con$WR
WRMT.con$P
?winratio
library(devtools)
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
usethis::use_gpl3_license("Yunhan Mou")
load("D:\\MYH\\Study\\Yale\\RA 2021\\YSPH\\PCWR paper\\revise 202403\\code\\DIG\\DIG_case_study_use.RData")
analysis.results <- WRAT(data = mydata[,1:6],
method = "weights",
weights = c(1,1), calipers = 0.2,
clinical.threshold = c(0,0),
direction = c(1,1),
strata = mydata[,7],
strata.weight = NULL)
cat("WR:",analysis.results$WR, "; P-value:", analysis.results$P,"\n")
?quantile
load("D:\\MYH\\Study\\Yale\\RA 2021\\YSPH\\PCWR paper\\revise 202403\\code\\DIG\\DIG_case_study_use.RData")
load("D:\\MYH\\Study\\Yale\\RA 2021\\YSPH\\PCWR paper\\revise 202403\\code\\DIG\\DIG_case_study_use.RData")
analysis.results <- WRAT(data = mydata[,1:6],
method = "weights",
weights = c(1,1), calipers = 0.2,
clinical.threshold = c(0,0),
direction = c(1,1),
strata = mydata[,7],
strata.weight = NULL)
cat("WR:",analysis.results$WR, "; P-value:", analysis.results$P,"\n")
analysis.results <- WRMT(data = mydata[,1:6],
threshold = c(0,0), stage = c(1,2),
direction = c(1,1),
strata = mydata[,7],
strata.weight = NULL)
cat("WR:",analysis.results$WR, "; P-value:", analysis.results$P,"\n")
devtools::load_all(".")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::clean_dll()
devtools::build_manual()
library(devtools)
devtools::document()
devtools::clean_dll()
devtools::build_manual()
